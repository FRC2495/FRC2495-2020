// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.command.Command;
import frc.robot.Robot;
import frc.robot.sensors.ColorSensor.DetectedColor;

/**
 *
 */
public class SpinnerSpinThrice extends Command {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private final int TRANSITIONS_REQUIRED = 3*8+1; // 3 revolutions * 8 colors + margin of error

	private int counter = 0;
	private DetectedColor previousColor = DetectedColor.UNKNOWN;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public SpinnerSpinThrice() {
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.spinnerWheel);
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	@Override
	protected void initialize() {
		System.out.println("SpinnerColorMatch: initialize");

		counter = 0;

	/*	Robot.colorSensor.updateColorSensor(); // just in case nobody forced update already
		previousColor = Robot.colorSensor.getDetectedColor(); //color we are seeing
*/
		Robot.spinnerWheel.spin();
	}

	// Called repeatedly when this Command is scheduled to run
	@Override
	protected void execute() {

		/* Robot.colorSensor.updateColorSensor(); // just in case nobody forced update already
		DetectedColor detectedColor = Robot.colorSensor.getDetectedColor(); //color we are seeing

		if (detectedColor != previousColor)
		{
			counter++; // we believe we detected a transition
			previousColor = detectedColor; // we save the new color as the reference
		}*/
	}

	// Make this return true when this Command no longer needs to run execute()
	@Override
	protected boolean isFinished() {
		return counter >= TRANSITIONS_REQUIRED;
		//return false;
	}

	// Called once after isFinished returns true
	@Override
	protected void end() {
		System.out.println("SpinnerSpinThrice: end");
		Robot.spinnerWheel.stop();
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	@Override
	protected void interrupted() {
		System.out.println("SpinnerSpinThrice: interrupted");
		end();
	}
}
